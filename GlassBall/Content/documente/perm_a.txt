import java.io.*;
import java.util.*;

public class main {
	public static int m,n,NrPop=1400, NrMutatii=50;
	public static int[][] pop=new int[1700][300];//retine indivizii populatiei
	//si numarul de puncte fixe (coloana n+1) pe cate o linie

	public static void ordonare(){
	//clasificarea indivizilor dupa valorile crescatoare ale
	//functiei de performanta (adica numarul de puncte fixe)
	int i,j,k,aux;
	for(i=1;i<NrPop;i++)
		for(j=i+1;j<=NrPop;j++)
			if(pop[i][n+1]>pop[j][n+1])
				for(k=1;k<=n+1;k++){
					aux=pop[i][k];
					pop[i][k]=pop[j][k];
					pop[j][k]=aux;
					}
	}

	public static void generare(){
	//generarea populatiei initiale in mod aleator
	int i,j,k,x,sw;
	for(i=1;i<=NrPop-200;i++){
		for(j=1;j<=n;j++){
			do{
				x=(int)Math.ceil(Math.random()*n);
				sw=1;
				for(k=1;k<j;k++)
					if(x==pop[i][k])
						sw=0;
			}while(sw==0);
			pop[i][j]=x;
			}
		pop[i][n+1]=fitness(i);
		}
	}

	public static void mutatie(){
		//mutatiile genetice au fost modelate prin alegerea,
		//in mod aleator, a unui traseu si inversarea poz. unor
		//elemente, selectate tot aleator
		int i,N,M,P,aux;
		for(i=1;i<=NrMutatii;i++){
			N=1+(int)Math.round(Math.random()*(NrPop-201));
			//generam nodul M
			M=1+(int)Math.round(Math.random()*(n-1));
			//generam nodul P
			P=1+(int)Math.round(Math.random()*(n-1));
			aux=pop[N][M];
			pop[N][M]=pop[N][P];
			pop[N][P]=aux;
			//se poate repeta cu inca o perechete de noduri N,P
			pop[N][n+1]=fitness(N);
			}
		}

	public static void generatie(){
	//generatie noua - pentru doua trasee, care se intersecteaza
	//prin incrucisare
	int i,j,k,M,N,sw,l;
	for(i=NrPop-200+1;i<=NrPop+100;i++){
	    do{
		sw=1;
		M=(int)Math.round(Math.random()*20);
		N=(int)Math.round(Math.random()*20);
		k=1;
		do{
			k++;
		}while(pop[M][k]!=pop[N][k]);//k= nod de intersesctie individ M cu N
		//prima noua solutie se adauga la populatie
		for(j=1;j<=k;j++)
			pop[i][j]=pop[m][j];
		for(j=k+1;j<=n;j++)
			pop[i][j]=pop[N][j];
		for(j=1;j<=n;j++)
			for(l=i+1;l<=n;l++)
				if(pop[i][j]==pop[i][l])
					sw=0;
		for(j=1;j<=k;j++)
			pop[i+100][j]=pop[N][j];
		for(j=k+1;j<=n;j++)
			pop[i+100][j]=pop[M][j];
		for(j=1;j<=n;j++)
			for(l=j+1;l<=n;l++)
				if(pop[i+100][j]==pop[i+100][l])
					sw=0;
	   }while(sw==0);
	   pop[i][n+1]=fitness(i);
	   pop[i+100][n+1]=fitness(i+100);
	  }
	}

	public static void main(String[] args) throws IOException {
		Scanner f=new Scanner(System.in);
		System.out.print("n=");
		n=f.nextInt();
		
		int i,j,k;


	//algoritm genetic pentru permutari fara puncte fixe
	generare();
	System.out.print("Introduceti numarul de generatii:");
	int NrGeneratii=f.nextInt();
	f.close();
	for(i=1;i<=NrGeneratii;i++){
		generatie();
		mutatie();
		ordonare();
	}
	System.out.println("Nrgeneratii="+NrGeneratii);
	for (j=1;j<=n;j++)
		if (pop[j][n+1]==0)
		{
		for(i=1;i<=n;i++)
			System.out.print(pop[j][i]+" ");
			System.out.println();
		}
	}

